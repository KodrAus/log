var N = null;var searchIndex = {};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,"RecordBuilder","","Builder for `Record`.",N,N],[3,"Metadata","","Metadata about a log message.",N,N],[3,"MetadataBuilder","","Builder for `Metadata`.",N,N],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has already been called.",N,N],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't match any of the log levels.",N,N],[4,"Level","","An enum representing the available verbosity levels of the logger.",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LevelFilter","","An enum representing the available verbosity level filters of the logger.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"set_max_level","","Sets the global maximum log level.",N,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",N,[[],["levelfilter"]]],[5,"set_boxed_logger","","Sets the global logger to a `Box<Log>`.",N,[[["box",["log"]]],["result",["setloggererror"]]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",N,[[["log"]],["result",["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",N,[[],["log"]]],[0,"kv","","Structured key-value pairs for log records.",N,N],[3,"Error","log::kv","An error encountered while visiting a key-value source.",N,N],[11,"as_error","","Get a reference to a standard error.",2,[[["self"]],["error"]]],[11,"into_error","","Convert into a standard error.",2,[[["self"]],["box",["error"]]]],[11,"msg","","Capture a static message as an error.",2,[[["str"]],["self"]]],[0,"value","","Serialization for structured values.",N,N],[3,"Error","log::kv::value","An error encountered while visiting a key-value source.",N,N],[3,"Value","","The value in a key-value pair.",N,N],[8,"Visit","","An arbitrary structured value.",N,N],[10,"visit","","Visit this value.",3,[[["self"],["visitor"]],["result",["error"]]]],[11,"to_value","","Convert a reference to this value into an erased `Value`.",3,[[["self"]],["value"]]],[8,"Visitor","","A serializer for primitive values.",N,N],[10,"visit_any","","Visit an arbitrary value.",4,[[["self"],["value"]],["result",["error"]]]],[11,"visit_i64","","Visit a signed integer.",4,[[["self"],["i64"]],["result",["error"]]]],[11,"visit_u64","","Visit an unsigned integer.",4,[[["self"],["u64"]],["result",["error"]]]],[11,"visit_f64","","Visit a floating point number.",4,[[["self"],["f64"]],["result",["error"]]]],[11,"visit_bool","","Visit a boolean.",4,[[["self"],["bool"]],["result",["error"]]]],[11,"visit_char","","Visit a single character.",4,[[["self"],["char"]],["result",["error"]]]],[11,"visit_str","","Visit a UTF8 string.",4,[[["self"],["str"]],["result",["error"]]]],[11,"visit_bytes","","Visit a raw byte buffer.",4,N],[11,"visit_none","","Visit standard arguments.",4,[[["self"]],["result",["error"]]]],[11,"visit_fmt","","Visit standard arguments.",4,[[["self"],["arguments"]],["result",["error"]]]],[11,"new","","Create a value.",5,N],[11,"any","","Create a value from an anonymous type.",5,N],[11,"visit","","Visit the contents of this value with a visitor.",5,[[["self"],["visitor"]],["result",["error"]]]],[0,"source","log::kv","Sources of structured key-value pairs.",N,N],[3,"Key","log::kv::source","The key in a key-value pair.",N,N],[3,"Value","","The value in a key-value pair.",N,N],[3,"Error","","An error encountered while visiting a key-value source.",N,N],[3,"Chained","","A chain of two `Source`s.",N,N],[3,"ErasedSource","","",N,N],[8,"Source","","A source for key value pairs that can be serialized.",N,N],[10,"visit","","Serialize the key value pairs.",6,[[["self"],["visitor"]],["result",["error"]]]],[11,"erase","","Erase this `Source` so it can be used without requiring generic type parameters.",6,[[["self"]],["erasedsource"]]],[11,"get","","Find the value for a given key.",6,[[["self"],["q"]],["option",["value"]]]],[11,"by_ref","","An adapter to borrow self.",6,[[["self"]],["self"]]],[11,"chain","","Chain two `Source`s together.",6,[[["self"],["kvs"]],["chained"]]],[11,"try_for_each","","Apply a function to each key-value pair.",6,[[["self"],["f"]],["result",["error"]]]],[8,"Visitor","","A visitor for key value pairs.",N,N],[10,"visit_pair","","Visit a key value pair.",7,[[["self"],["key"],["value"]],["result",["error"]]]],[11,"erased","","",8,N],[11,"empty","","",8,[[],["self"]]],[8,"Source","log::kv","A source for key value pairs that can be serialized.",N,N],[10,"visit","","Serialize the key value pairs.",6,[[["self"],["visitor"]],["result",["error"]]]],[11,"erase","","Erase this `Source` so it can be used without requiring generic type parameters.",6,[[["self"]],["erasedsource"]]],[11,"get","","Find the value for a given key.",6,[[["self"],["q"]],["option",["value"]]]],[11,"by_ref","","An adapter to borrow self.",6,[[["self"]],["self"]]],[11,"chain","","Chain two `Source`s together.",6,[[["self"],["kvs"]],["chained"]]],[11,"try_for_each","","Apply a function to each key-value pair.",6,[[["self"],["f"]],["result",["error"]]]],[17,"STATIC_MAX_LEVEL","log","The statically resolved maximum log level.",N,N],[8,"Log","","A trait encapsulating the operations required of a logger.",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",9,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",9,[[["self"],["record"]]]],[10,"flush","","Flushes any buffered records.",9,[[["self"]]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],["option",["level"]]]],[11,"builder","","Returns a new builder.",10,[[],["recordbuilder"]]],[11,"args","","The message body.",10,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",10,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",10,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",10,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",10,[[["self"]],["option",["str"]]]],[11,"file","","The source file containing the message.",10,[[["self"]],["option",["str"]]]],[11,"line","","The line containing the message.",10,[[["self"]],["option",["u32"]]]],[11,"key_values","","The key value pairs attached to this record.",10,[[["self"]],["erasedsource"]]],[11,"to_builder","","Get a builder from this record.",10,[[["self"]],["recordbuilder"]]],[11,"new","","Construct new `RecordBuilder`.",11,[[],["recordbuilder"]]],[11,"args","","Set `args`.",11,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with `MetadataBuilder`.",11,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",11,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",11,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",11,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",11,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",11,[[["self"],["option",["u32"]]],["recordbuilder"]]],[11,"key_values","","Set key values",11,[[["self"],["erasedsource"]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",11,[[["self"]],["record"]]],[11,"builder","","Returns a new builder.",12,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",12,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",12,[[["self"]],["str"]]],[11,"new","","Construct a new `MetadataBuilder`.",13,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",13,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",13,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",13,[[["self"]],["metadata"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","log::kv","",2,[[["t"]],["t"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","log::kv::source","",16,[[["t"]],["t"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"visit","","",5,[[["self"],["visitor"]],["result",["error"]]]],[11,"visit","","",17,[[["self"],["visitor"]],["result",["error"]]]],[11,"visit","","",8,[[["self"],["visitor"]],["result",["error"]]]],[11,"get","","",8,[[["self"],["q"]],["option",["value"]]]],[11,"from","log::kv","",2,[[["e"]],["self"]]],[11,"from","log::kv::source","",16,[[["str"]],["self"]]],[11,"from","","",16,[[["string"]],["self"]]],[11,"as_ref","log::kv","",2,[[["self"]],["error"]]],[11,"as_ref","log::kv::source","",16,[[["self"]],["str"]]],[11,"cmp","","",16,[[["self"],["self"]],["ordering"]]],[11,"cmp","log","",0,[[["self"],["level"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["levelfilter"]],["ordering"]]],[11,"cmp","","",12,[[["self"],["metadata"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"clone","log::kv::source","",8,[[["self"]],["erasedsource"]]],[11,"clone","log","",0,[[["self"]],["level"]]],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"clone","","",10,[[["self"]],["record"]]],[11,"clone","","",12,[[["self"]],["metadata"]]],[11,"partial_cmp","log::kv::source","",16,[[["self"],["self"]],["option",["ordering"]]]],[11,"partial_cmp","log","",0,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["metadata"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["metadata"]],["bool"]]],[11,"le","","",12,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",12,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",12,[[["self"],["metadata"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["metadatabuilder"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",13,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",13,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",13,[[["self"],["metadatabuilder"]],["bool"]]],[11,"eq","log::kv::source","",16,[[["self"],["self"]],["bool"]]],[11,"eq","log","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"eq","","",12,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",12,[[["self"],["metadata"]],["bool"]]],[11,"eq","","",13,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",13,[[["self"],["metadatabuilder"]],["bool"]]],[11,"eq","","",15,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",15,[[["self"],["parselevelerror"]],["bool"]]],[11,"hash","log::kv::source","",16,[[["self"],["h"]]]],[11,"hash","log","",0,N],[11,"hash","","",1,N],[11,"hash","","",12,N],[11,"hash","","",13,N],[11,"fmt","log::kv","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","log::kv::source","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","log","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","log::kv","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","log::kv::source","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","log","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["level"]]]],[11,"from_str","","",1,[[["str"]],["result",["levelfilter"]]]],[11,"borrow","log::kv::source","",16,[[["self"]],["str"]]],[11,"description","log","",14,[[["self"]],["str"]]],[11,"description","","",15,[[["self"]],["str"]]],[11,"owned","log::kv::source","",16,N],[11,"new","","",16,N],[11,"as_str","","",16,[[["self"]],["str"]]]],"paths":[[4,"Level"],[4,"LevelFilter"],[3,"Error"],[8,"Visit"],[8,"Visitor"],[3,"Value"],[8,"Source"],[8,"Visitor"],[3,"ErasedSource"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"],[3,"Key"],[3,"Chained"]]};
initSearch(searchIndex);
